use crate::training::{train, training, TrainingConfig};
use burn::backend::{Autodiff, Wgpu};
use burn::module::AutodiffModule;
use burn::tensor::backend::AutodiffBackend;
use burn::{
    nn::{
        conv::{Conv2d, Conv2dConfig},
        pool::{AdaptiveAvgPool2d, AdaptiveAvgPool2dConfig},
        Dropout, DropoutConfig, Linear, LinearConfig, Relu,
    },
    prelude::*,
};
use tracel::heat::client::{HeatClient, HeatClientConfig, HeatCredentials};
use tracel::heat::command::{MultiDevice, TrainCommandContext, TrainCommandHandler};
use tracel::heat::errors::training::TrainingError;
use tracel::heat::schemas::ProjectPath;

#[derive(Module, Debug)]
pub struct Model<B: Backend> {
    conv1: Conv2d<B>,
    conv2: Conv2d<B>,
    pool: AdaptiveAvgPool2d,
    dropout: Dropout,
    linear1: Linear<B>,
    linear2: Linear<B>,
    activation: Relu,
}

// static generic bounds test to see if Model's B genric is always impls the AutodiffBackend trait

pub fn trigger<
    B: Backend,
    T,
    M: Module<B>,
    E: Into<Box<dyn std::error::Error>>,
    H: TrainCommandHandler<B, T, M, E>,
>(
    handler: H,
    context: TrainCommandContext<B>,
) -> Result<M, Box<dyn std::error::Error>> {
    match handler.call(context) {
        Ok(model) => Ok(model),
        Err(e) => Err(e.into()),
    }
}

pub trait TrainableModule<B: Backend>: Module<B> {}

impl<B: Backend> TrainableModule<B> for Model<B> {
    // This trait can be used to mark modules that can be trained.
}

struct TrainFunctionReference {
    name: String,
    trait_bounds: Vec<String>,
}

// registered functions impl block
// this macro will register the functions in registries
// fucntions are grouped by their backend trait bounds
// #[model::register]
impl<B: Backend> Model<B>
where
    Self: TrainableModule<B>,
{
    /// Function that doesn't match, it will not be registered.
    pub fn hello_world() -> String {
        "Hello, world!".to_string()
    }

    pub fn train1(
        mut client: HeatClient,
        config: TrainingConfig,
        MultiDevice(devices): MultiDevice<B>,
    ) -> Result<Self, TrainingError>
    where
        B: AutodiffBackend,
    {
        println!("custom model train function called");
        let model = train(&mut client, "hi", config, devices[0].clone());
        model
    }

    pub fn train2(
        mut client: HeatClient,
        config: TrainingConfig,
        MultiDevice(devices): MultiDevice<B>,
    ) -> Result<Self, TrainingError> {
        Err(TrainingError::UnknownError("hi".to_string()))
    }

    // This function is generated by the macro and will be used to select the train function based on the name.
    pub fn select_train_function(
        name: &str,
        context: TrainCommandContext<B>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        match name {
            "train1" => trigger(Self::train1, context),
            "train2" => trigger(Self::train2, context),
            _ => Err(Box::new(TrainingError::UnknownError(format!(
                "Unknown train function: {}",
                name
            )))),
        }
    }

    pub fn get_all_train_functions() -> Vec<String> {
        vec!["train1".to_string(), "train2".to_string()]
    }
}

/// For a given `B: Backend`, allow calling named train-functions on `Model<B>`.
pub trait TrainFunctionSelector<B: Backend> {
    fn select_train(
        name: &str,
        context: TrainCommandContext<B>,
    ) -> Result<Model<B>, Box<dyn std::error::Error>>;
}

/// 1) The impl for backends that **do** implement `AutodiffBackend`.
///    It knows how to call both `train1` and `train2`.
impl<B> TrainFunctionSelector<B> for Model<B>
where
    B: Backend + AutodiffBackend, // ‒ can run train1
    Model<B>: TrainableModule<B>, // ‒ (your marker trait)
{
    fn select_train(
        name: &str,
        context: TrainCommandContext<B>,
    ) -> Result<Model<B>, Box<dyn std::error::Error>> {
        match name {
            "train1" => {
                // Now B: AutodiffBackend, so this compiles fine:
                trigger(Self::train1, context)
            }
            "train2" => {
                // train2 had no extra bound beyond B: Backend,
                // so we can call it here as well.
                trigger(Self::train2, context)
            }
            other => Err(Box::new(TrainingError::UnknownError(format!(
                "Unknown train function: {}",
                other
            )))),
        }
    }
}

#[test]
fn test_model_forward() {
    use burn::backend::wgpu::WgpuDevice;
    use burn::backend::Wgpu;

    let device = WgpuDevice::default();

    let model_config = ModelConfig {
        num_classes: 10,
        hidden_size: 128,
        dropout: 0.5,
    };
    let model_: Model<Wgpu> = model_config.init(&device);
    <Model<Wgpu> as AutodiffModule<Wgpu>>::valid(&model_);

    let client = HeatClientConfig::builder(
        HeatCredentials::new("da".parse().unwrap()),
        ProjectPath::try_from("ad".to_string()).unwrap(),
    )
    .build();
    let client = HeatClient::create(client).unwrap();
    let model = Model::<Wgpu>::select_train_function(
        "train1",
        TrainCommandContext::new(client, vec![device.clone()], model_config.to_string()),
    );
    assert!(model.is_ok());
}

#[derive(Config, Debug)]
pub struct ModelConfig {
    num_classes: usize,
    hidden_size: usize,
    #[config(default = "0.5")]
    dropout: f64,
}

impl ModelConfig {
    /// Returns the initialized model.
    pub fn init<B: Backend>(&self, device: &B::Device) -> Model<B> {
        Model {
            conv1: Conv2dConfig::new([1, 8], [3, 3]).init(device),
            conv2: Conv2dConfig::new([8, 16], [3, 3]).init(device),
            pool: AdaptiveAvgPool2dConfig::new([8, 8]).init(),
            activation: Relu::new(),
            linear1: LinearConfig::new(16 * 8 * 8, self.hidden_size).init(device),
            linear2: LinearConfig::new(self.hidden_size, self.num_classes).init(device),
            dropout: DropoutConfig::new(self.dropout).init(),
        }
    }
}

impl<B: Backend> Model<B> {
    /// # Shapes
    ///   - Images [batch_size, height, width]
    ///   - Output [batch_size, class_prob]
    pub fn forward(&self, images: Tensor<B, 3>) -> Tensor<B, 2> {
        let [batch_size, height, width] = images.dims();

        // Create a channel.
        let x = images.reshape([batch_size, 1, height, width]);

        let x = self.conv1.forward(x); // [batch_size, 8, _, _]
        let x = self.dropout.forward(x);
        let x = self.conv2.forward(x); // [batch_size, 16, _, _]
        let x = self.dropout.forward(x);
        let x = self.activation.forward(x);

        let x = self.pool.forward(x); // [batch_size, 16, 8, 8]
        let x = x.reshape([batch_size, 16 * 8 * 8]);
        let x = self.linear1.forward(x);
        let x = self.dropout.forward(x);
        let x = self.activation.forward(x);

        self.linear2.forward(x) // [batch_size, num_classes]
    }
}
